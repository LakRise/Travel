(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _headerMenu = require("./modules/header-menu");
var _heroSwiper = require("./modules/hero-swiper");
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  (0, _iosVhFix.iosVhFix)();
  (0, _headerMenu.initMenu)();
  (0, _heroSwiper.setSwiperHero)();

  // Modules
  // ---------------------------------

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {});
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используется matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

},{"./modules/header-menu":2,"./modules/hero-swiper":3,"./utils/ios-vh-fix":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initMenu = void 0;
var main = document.querySelector('[data-main="main"');
var header = document.querySelector('[data-menu="header"]');
var button = header.querySelector('[data-menu="button"]');
var menu = header.querySelector('[data-menu="menu"]');
var closeMenu = function closeMenu() {
  header.classList.remove('is-active');
  main.classList.remove('modal-opened');
  menu.removeEventListener('click', onLinkClick);
  document.body.style.position = '';
  document.body.style.top = '';
};
var onLinkClick = function onLinkClick(evt) {
  if (evt.target.matches('[data-menu="link"]')) {
    closeMenu();
  }
};
var openMenu = function openMenu() {
  header.classList.add('is-active');
  main.classList.add('modal-opened');
  menu.addEventListener('click', onLinkClick);
  document.body.style.position = 'fixed';
  document.body.style.top = "-".concat(window.scrollY, "px");
};
var onBurgerClick = function onBurgerClick() {
  if (button === null) {
    return;
  }
  if (!header.classList.contains('is-active')) {
    openMenu();
  } else {
    closeMenu();
  }
};
var initMenu = exports.initMenu = function initMenu() {
  if (button !== null) {
    button.addEventListener('click', onBurgerClick);
  }
};

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSwiperHero = void 0;
var hero = document.querySelector('[data-swiper="hero"]');
var setSwiperHero = exports.setSwiperHero = function setSwiperHero() {
  var swiperHero = new window.Swiper(hero, {
    direction: 'horizontal',
    loop: false,
    slidesPerView: '1',
    autoHeight: true,
    pagination: {
      el: '[data-swiper="hero-pagination"]',
      clickable: true,
      bulletClass: 'hero__pagination-bullet',
      bulletActiveClass: 'hero__pagination-bullet--active'
    }
  });
};

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":4}]},{},[1])


//# sourceMappingURL=main.min.js.map
